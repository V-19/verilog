/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "cont1.v:1" *)
module cont1(Q, RCO, clk, enb, modo, D);
  (* src = "cont1.v:23" *)
  wire [3:0] _000_;
  (* src = "cont1.v:23" *)
  wire _001_;
  (* src = "cont1.v:23" *)
  wire _002_;
  (* src = "cont1.v:23" *)
  wire _003_;
  (* src = "cont1.v:23" *)
  wire _004_;
  (* src = "cont1.v:23" *)
  wire _005_;
  (* src = "cont1.v:23" *)
  wire _006_;
  (* src = "cont1.v:23" *)
  wire _007_;
  (* src = "cont1.v:23" *)
  wire _008_;
  (* src = "cont1.v:23" *)
  wire _009_;
  (* src = "cont1.v:13" *)
  wire _010_;
  (* src = "cont1.v:13" *)
  wire _011_;
  (* src = "cont1.v:13" *)
  wire _012_;
  (* src = "cont1.v:13" *)
  wire _013_;
  (* src = "cont1.v:16" *)
  wire _014_;
  (* src = "cont1.v:16" *)
  wire _015_;
  (* src = "cont1.v:16" *)
  wire _016_;
  (* src = "cont1.v:16" *)
  wire _017_;
  (* src = "cont1.v:17" *)
  wire _018_;
  (* src = "cont1.v:12" *)
  wire _019_;
  (* src = "cont1.v:14" *)
  wire _020_;
  (* src = "cont1.v:14" *)
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  (* src = "cont1.v:28" *)
  (* unused_bits = "4" *)
  wire [31:0] _095_;
  wire [1:0] _096_;
  wire [1:0] _097_;
  wire [1:0] _098_;
  wire [1:0] _099_;
  wire [1:0] _100_;
  wire [1:0] _101_;
  wire [1:0] _102_;
  wire [1:0] _103_;
  wire [1:0] _104_;
  wire _105_;
  wire _106_;
  wire [3:0] _107_;
  wire [1:0] _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  (* src = "cont1.v:50" *)
  wire _115_;
  (* src = "cont1.v:50" *)
  wire _116_;
  (* src = "cont1.v:56" *)
  wire _117_;
  (* src = "cont1.v:56" *)
  wire _118_;
  (* src = "cont1.v:65" *)
  wire _119_;
  (* src = "cont1.v:65" *)
  wire _120_;
  (* src = "cont1.v:65" *)
  wire _121_;
  (* src = "cont1.v:50" *)
  wire _122_;
  (* src = "cont1.v:56" *)
  wire _123_;
  (* src = "cont1.v:65" *)
  wire _124_;
  (* src = "cont1.v:65" *)
  wire _125_;
  (* src = "cont1.v:31|cont1.v:27|<techmap.v>:432" *)
  wire [15:0] _126_;
  (* src = "cont1.v:31|cont1.v:27|<techmap.v>:428" *)
  wire [3:0] _127_;
  wire [3:0] _128_;
  wire _129_;
  (* src = "cont1.v:29" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _130_;
  (* src = "cont1.v:30" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _131_;
  (* src = "cont1.v:28|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _132_;
  (* src = "cont1.v:31|cont1.v:27|<techmap.v>:445" *)
  wire _133_;
  (* src = "cont1.v:29|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _134_;
  (* src = "cont1.v:30|cont1.v:29|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _135_;
  (* src = "cont1.v:29|<techmap.v>:260|<techmap.v>:221" *)
  wire _136_;
  (* src = "cont1.v:29|<techmap.v>:260|<techmap.v>:229" *)
  wire _137_;
  (* src = "cont1.v:30|cont1.v:29|<techmap.v>:260|<techmap.v>:229" *)
  wire _138_;
  (* src = "cont1.v:13" *)
  input [3:0] D;
  (* src = "cont1.v:16" *)
  output [3:0] Q;
  (* src = "cont1.v:17" *)
  output RCO;
  (* src = "cont1.v:12" *)
  input clk;
  (* src = "cont1.v:12" *)
  input enb;
  (* src = "cont1.v:14" *)
  input [1:0] modo;
  NOT _139_ (
    .A(_015_),
    .Y(_022_)
  );
  NOT _140_ (
    .A(_014_),
    .Y(_023_)
  );
  NOT _141_ (
    .A(_016_),
    .Y(_024_)
  );
  NOT _142_ (
    .A(_020_),
    .Y(_025_)
  );
  NOT _143_ (
    .A(_021_),
    .Y(_026_)
  );
  NOT _144_ (
    .A(_019_),
    .Y(_027_)
  );
  NOT _145_ (
    .A(_011_),
    .Y(_028_)
  );
  NOT _146_ (
    .A(_012_),
    .Y(_029_)
  );
  NOR _147_ (
    .A(_018_),
    .B(_019_),
    .Y(_030_)
  );
  NAND _148_ (
    .A(_015_),
    .B(_014_),
    .Y(_031_)
  );
  NOR _149_ (
    .A(_024_),
    .B(_031_),
    .Y(_032_)
  );
  NOT _150_ (
    .A(_032_),
    .Y(_033_)
  );
  NAND _151_ (
    .A(_017_),
    .B(_032_),
    .Y(_034_)
  );
  NOT _152_ (
    .A(_034_),
    .Y(_035_)
  );
  NOR _153_ (
    .A(_020_),
    .B(_021_),
    .Y(_036_)
  );
  NAND _154_ (
    .A(_035_),
    .B(_036_),
    .Y(_037_)
  );
  NAND _155_ (
    .A(_024_),
    .B(_031_),
    .Y(_038_)
  );
  NOT _156_ (
    .A(_038_),
    .Y(_039_)
  );
  NOR _157_ (
    .A(_020_),
    .B(_026_),
    .Y(_040_)
  );
  NOR _158_ (
    .A(_017_),
    .B(_038_),
    .Y(_041_)
  );
  NAND _159_ (
    .A(_040_),
    .B(_041_),
    .Y(_042_)
  );
  NAND _160_ (
    .A(_019_),
    .B(_042_),
    .Y(_043_)
  );
  NOR _161_ (
    .A(_015_),
    .B(_014_),
    .Y(_044_)
  );
  NAND _162_ (
    .A(_022_),
    .B(_023_),
    .Y(_045_)
  );
  NOR _163_ (
    .A(_016_),
    .B(_045_),
    .Y(_046_)
  );
  NAND _164_ (
    .A(_024_),
    .B(_044_),
    .Y(_047_)
  );
  NOR _165_ (
    .A(_025_),
    .B(_021_),
    .Y(_048_)
  );
  NAND _166_ (
    .A(_020_),
    .B(_026_),
    .Y(_049_)
  );
  NOR _167_ (
    .A(_017_),
    .B(_049_),
    .Y(_050_)
  );
  NAND _168_ (
    .A(_046_),
    .B(_050_),
    .Y(_051_)
  );
  NAND _169_ (
    .A(_037_),
    .B(_051_),
    .Y(_052_)
  );
  NOR _170_ (
    .A(_043_),
    .B(_052_),
    .Y(_053_)
  );
  NOR _171_ (
    .A(_030_),
    .B(_053_),
    .Y(_009_)
  );
  NAND _172_ (
    .A(_014_),
    .B(_027_),
    .Y(_054_)
  );
  NAND _173_ (
    .A(_020_),
    .B(_021_),
    .Y(_055_)
  );
  NOT _174_ (
    .A(_055_),
    .Y(_056_)
  );
  NAND _175_ (
    .A(_010_),
    .B(_056_),
    .Y(_057_)
  );
  NAND _176_ (
    .A(_023_),
    .B(_055_),
    .Y(_058_)
  );
  NAND _177_ (
    .A(_057_),
    .B(_058_),
    .Y(_059_)
  );
  NAND _178_ (
    .A(_019_),
    .B(_059_),
    .Y(_060_)
  );
  NAND _179_ (
    .A(_054_),
    .B(_060_),
    .Y(_005_)
  );
  NOR _180_ (
    .A(_015_),
    .B(_019_),
    .Y(_061_)
  );
  NAND _181_ (
    .A(_031_),
    .B(_045_),
    .Y(_062_)
  );
  NOR _182_ (
    .A(_020_),
    .B(_062_),
    .Y(_063_)
  );
  NAND _183_ (
    .A(_048_),
    .B(_062_),
    .Y(_064_)
  );
  NOR _184_ (
    .A(_028_),
    .B(_055_),
    .Y(_065_)
  );
  NOR _185_ (
    .A(_027_),
    .B(_065_),
    .Y(_066_)
  );
  NAND _186_ (
    .A(_064_),
    .B(_066_),
    .Y(_067_)
  );
  NOR _187_ (
    .A(_063_),
    .B(_067_),
    .Y(_068_)
  );
  NOR _188_ (
    .A(_061_),
    .B(_068_),
    .Y(_006_)
  );
  NOR _189_ (
    .A(_016_),
    .B(_019_),
    .Y(_069_)
  );
  NOR _190_ (
    .A(_032_),
    .B(_039_),
    .Y(_070_)
  );
  NAND _191_ (
    .A(_033_),
    .B(_038_),
    .Y(_071_)
  );
  NAND _192_ (
    .A(_040_),
    .B(_071_),
    .Y(_072_)
  );
  NAND _193_ (
    .A(_016_),
    .B(_045_),
    .Y(_073_)
  );
  NAND _194_ (
    .A(_047_),
    .B(_073_),
    .Y(_074_)
  );
  NAND _195_ (
    .A(_048_),
    .B(_074_),
    .Y(_075_)
  );
  NAND _196_ (
    .A(_072_),
    .B(_075_),
    .Y(_076_)
  );
  NAND _197_ (
    .A(_036_),
    .B(_070_),
    .Y(_077_)
  );
  NOR _198_ (
    .A(_029_),
    .B(_055_),
    .Y(_078_)
  );
  NOR _199_ (
    .A(_027_),
    .B(_078_),
    .Y(_079_)
  );
  NAND _200_ (
    .A(_077_),
    .B(_079_),
    .Y(_080_)
  );
  NOR _201_ (
    .A(_076_),
    .B(_080_),
    .Y(_081_)
  );
  NOR _202_ (
    .A(_069_),
    .B(_081_),
    .Y(_007_)
  );
  NOR _203_ (
    .A(_017_),
    .B(_019_),
    .Y(_082_)
  );
  NAND _204_ (
    .A(_047_),
    .B(_048_),
    .Y(_083_)
  );
  NAND _205_ (
    .A(_038_),
    .B(_040_),
    .Y(_084_)
  );
  NAND _206_ (
    .A(_083_),
    .B(_084_),
    .Y(_085_)
  );
  NAND _207_ (
    .A(_017_),
    .B(_085_),
    .Y(_086_)
  );
  NOR _208_ (
    .A(_017_),
    .B(_032_),
    .Y(_087_)
  );
  NAND _209_ (
    .A(_034_),
    .B(_036_),
    .Y(_088_)
  );
  NOR _210_ (
    .A(_087_),
    .B(_088_),
    .Y(_089_)
  );
  NAND _211_ (
    .A(_013_),
    .B(_056_),
    .Y(_090_)
  );
  NAND _212_ (
    .A(_051_),
    .B(_090_),
    .Y(_091_)
  );
  NOR _213_ (
    .A(_043_),
    .B(_091_),
    .Y(_092_)
  );
  NAND _214_ (
    .A(_086_),
    .B(_092_),
    .Y(_093_)
  );
  NOR _215_ (
    .A(_089_),
    .B(_093_),
    .Y(_094_)
  );
  NOR _216_ (
    .A(_082_),
    .B(_094_),
    .Y(_008_)
  );
  (* src = "cont1.v:23" *)
  DFF _217_ (
    .C(clk),
    .D(_000_[0]),
    .Q(Q[0])
  );
  (* src = "cont1.v:23" *)
  DFF _218_ (
    .C(clk),
    .D(_000_[1]),
    .Q(Q[1])
  );
  (* src = "cont1.v:23" *)
  DFF _219_ (
    .C(clk),
    .D(_000_[2]),
    .Q(Q[2])
  );
  (* src = "cont1.v:23" *)
  DFF _220_ (
    .C(clk),
    .D(_000_[3]),
    .Q(Q[3])
  );
  (* src = "cont1.v:23" *)
  DFF _221_ (
    .C(clk),
    .D(_001_),
    .Q(RCO)
  );
  assign _095_[31:5] = 27'h0000000;
  assign _098_[1] = _097_[1];
  assign _104_[1] = _097_[1];
  assign _107_[0] = _095_[0];
  assign { _130_[30:4], _130_[0] } = { _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _130_[31], _095_[0] };
  assign { _131_[30:4], _131_[1:0] } = { _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _131_[31], _095_[1:0] };
  assign { _132_[31:3], _132_[0] } = { 28'h0000000, _095_[4], Q[0] };
  assign { _134_[30:3], _134_[0] } = { _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], _134_[31], Q[0] };
  assign { _135_[30:3], _135_[1:0] } = { _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _135_[31], _132_[1], Q[0] };
  assign _015_ = Q[1];
  assign _014_ = Q[0];
  assign _016_ = Q[2];
  assign _017_ = Q[3];
  assign _020_ = modo[0];
  assign _021_ = modo[1];
  assign _018_ = RCO;
  assign _019_ = enb;
  assign _001_ = _009_;
  assign _000_[0] = _005_;
  assign _000_[1] = _006_;
  assign _000_[2] = _007_;
  assign _000_[3] = _008_;
  assign _010_ = D[0];
  assign _011_ = D[1];
  assign _012_ = D[2];
  assign _013_ = D[3];
endmodule

(* src = "cont2.v:1" *)
module cont2(Q, RCO, clk, enb, modo, D);
  (* src = "cont2.v:27" *)
  wire [3:0] _000_;
  (* src = "cont2.v:27" *)
  wire _001_;
  (* src = "cont2.v:27" *)
  wire _002_;
  (* src = "cont2.v:27" *)
  wire _003_;
  (* src = "cont2.v:27" *)
  wire _004_;
  (* src = "cont2.v:27" *)
  wire _005_;
  (* src = "cont2.v:27" *)
  wire _006_;
  (* src = "cont2.v:27" *)
  wire _007_;
  (* src = "cont2.v:27" *)
  wire _008_;
  (* src = "cont2.v:27" *)
  wire _009_;
  (* src = "cont2.v:13" *)
  wire _010_;
  (* src = "cont2.v:13" *)
  wire _011_;
  (* src = "cont2.v:13" *)
  wire _012_;
  (* src = "cont2.v:13" *)
  wire _013_;
  (* src = "cont2.v:16" *)
  wire _014_;
  (* src = "cont2.v:16" *)
  wire _015_;
  (* src = "cont2.v:16" *)
  wire _016_;
  (* src = "cont2.v:16" *)
  wire _017_;
  (* src = "cont2.v:17" *)
  wire _018_;
  (* src = "cont2.v:12" *)
  wire _019_;
  (* src = "cont2.v:14" *)
  wire _020_;
  (* src = "cont2.v:14" *)
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  (* src = "cont2.v:32" *)
  (* unused_bits = "4" *)
  wire [31:0] _092_;
  wire _093_;
  wire [1:0] _094_;
  wire [1:0] _095_;
  wire [1:0] _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [1:0] _102_;
  wire _103_;
  wire _104_;
  wire [3:0] _105_;
  wire [1:0] _106_;
  wire [1:0] _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  (* src = "cont2.v:54" *)
  wire _114_;
  (* src = "cont2.v:54" *)
  wire _115_;
  (* src = "cont2.v:60" *)
  wire _116_;
  (* src = "cont2.v:60" *)
  wire _117_;
  (* src = "cont2.v:69" *)
  wire _118_;
  (* src = "cont2.v:69" *)
  wire _119_;
  (* src = "cont2.v:69" *)
  wire _120_;
  (* src = "cont2.v:54" *)
  wire _121_;
  (* src = "cont2.v:60" *)
  wire _122_;
  (* src = "cont2.v:69" *)
  wire _123_;
  (* src = "cont2.v:69" *)
  wire _124_;
  (* src = "cont2.v:35|cont2.v:31|<techmap.v>:432" *)
  wire [11:0] _125_;
  (* src = "cont2.v:35|cont2.v:31|<techmap.v>:428" *)
  wire [3:0] _126_;
  wire [3:0] _127_;
  wire _128_;
  (* src = "cont2.v:33" *)
  (* unused_bits = "4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _129_;
  (* src = "cont2.v:32|cont1.v:28|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3" *)
  wire [31:0] _130_;
  (* src = "cont2.v:35|cont2.v:31|<techmap.v>:445" *)
  wire _131_;
  (* src = "cont2.v:34|cont1.v:29|<techmap.v>:260|<techmap.v>:203" *)
  (* unused_bits = "3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31" *)
  wire [31:0] _132_;
  (* src = "cont2.v:34|cont1.v:29|<techmap.v>:260|<techmap.v>:221" *)
  wire _133_;
  (* src = "cont2.v:34|cont1.v:29|<techmap.v>:260|<techmap.v>:229" *)
  wire _134_;
  (* src = "cont2.v:13" *)
  input [3:0] D;
  (* src = "cont2.v:16" *)
  output [3:0] Q;
  (* init = 1'h0 *)
  (* src = "cont2.v:17" *)
  output RCO;
  (* src = "cont2.v:12" *)
  input clk;
  (* src = "cont2.v:12" *)
  input enb;
  (* src = "cont2.v:14" *)
  input [1:0] modo;
  NOT _135_ (
    .A(_015_),
    .Y(_022_)
  );
  NOT _136_ (
    .A(_014_),
    .Y(_023_)
  );
  NOT _137_ (
    .A(_016_),
    .Y(_024_)
  );
  NOT _138_ (
    .A(_017_),
    .Y(_025_)
  );
  NOT _139_ (
    .A(_021_),
    .Y(_026_)
  );
  NOT _140_ (
    .A(_020_),
    .Y(_027_)
  );
  NOT _141_ (
    .A(_019_),
    .Y(_028_)
  );
  NOT _142_ (
    .A(_011_),
    .Y(_029_)
  );
  NOT _143_ (
    .A(_012_),
    .Y(_030_)
  );
  NOT _144_ (
    .A(_013_),
    .Y(_031_)
  );
  NAND _145_ (
    .A(_015_),
    .B(_014_),
    .Y(_032_)
  );
  NOT _146_ (
    .A(_032_),
    .Y(_033_)
  );
  NOR _147_ (
    .A(_024_),
    .B(_032_),
    .Y(_034_)
  );
  NAND _148_ (
    .A(_017_),
    .B(_034_),
    .Y(_035_)
  );
  NOT _149_ (
    .A(_035_),
    .Y(_036_)
  );
  NOR _150_ (
    .A(_021_),
    .B(_020_),
    .Y(_037_)
  );
  NAND _151_ (
    .A(_026_),
    .B(_027_),
    .Y(_038_)
  );
  NAND _152_ (
    .A(_036_),
    .B(_037_),
    .Y(_039_)
  );
  NAND _153_ (
    .A(_024_),
    .B(_032_),
    .Y(_040_)
  );
  NOR _154_ (
    .A(_026_),
    .B(_020_),
    .Y(_041_)
  );
  NOR _155_ (
    .A(_017_),
    .B(_040_),
    .Y(_042_)
  );
  NAND _156_ (
    .A(_041_),
    .B(_042_),
    .Y(_043_)
  );
  NOR _157_ (
    .A(_015_),
    .B(_014_),
    .Y(_044_)
  );
  NAND _158_ (
    .A(_022_),
    .B(_023_),
    .Y(_045_)
  );
  NOR _159_ (
    .A(_016_),
    .B(_045_),
    .Y(_046_)
  );
  NAND _160_ (
    .A(_024_),
    .B(_044_),
    .Y(_047_)
  );
  NOR _161_ (
    .A(_017_),
    .B(_047_),
    .Y(_048_)
  );
  NOR _162_ (
    .A(_021_),
    .B(_027_),
    .Y(_049_)
  );
  NAND _163_ (
    .A(_048_),
    .B(_049_),
    .Y(_050_)
  );
  NOR _164_ (
    .A(_018_),
    .B(_019_),
    .Y(_051_)
  );
  NAND _165_ (
    .A(_039_),
    .B(_043_),
    .Y(_052_)
  );
  NAND _166_ (
    .A(_019_),
    .B(_050_),
    .Y(_053_)
  );
  NOR _167_ (
    .A(_052_),
    .B(_053_),
    .Y(_054_)
  );
  NOR _168_ (
    .A(_051_),
    .B(_054_),
    .Y(_009_)
  );
  NAND _169_ (
    .A(_014_),
    .B(_028_),
    .Y(_055_)
  );
  NAND _170_ (
    .A(_021_),
    .B(_020_),
    .Y(_056_)
  );
  NAND _171_ (
    .A(_014_),
    .B(_056_),
    .Y(_057_)
  );
  NOT _172_ (
    .A(_057_),
    .Y(_058_)
  );
  NOR _173_ (
    .A(_010_),
    .B(_056_),
    .Y(_059_)
  );
  NOR _174_ (
    .A(_058_),
    .B(_059_),
    .Y(_060_)
  );
  NAND _175_ (
    .A(_019_),
    .B(_060_),
    .Y(_061_)
  );
  NAND _176_ (
    .A(_055_),
    .B(_061_),
    .Y(_005_)
  );
  NOR _177_ (
    .A(_015_),
    .B(_019_),
    .Y(_062_)
  );
  NOR _178_ (
    .A(_033_),
    .B(_044_),
    .Y(_063_)
  );
  NAND _179_ (
    .A(_037_),
    .B(_063_),
    .Y(_064_)
  );
  NOR _180_ (
    .A(_041_),
    .B(_049_),
    .Y(_065_)
  );
  NOR _181_ (
    .A(_063_),
    .B(_065_),
    .Y(_066_)
  );
  NOR _182_ (
    .A(_029_),
    .B(_056_),
    .Y(_067_)
  );
  NOR _183_ (
    .A(_028_),
    .B(_067_),
    .Y(_068_)
  );
  NAND _184_ (
    .A(_064_),
    .B(_068_),
    .Y(_069_)
  );
  NOR _185_ (
    .A(_066_),
    .B(_069_),
    .Y(_070_)
  );
  NOR _186_ (
    .A(_062_),
    .B(_070_),
    .Y(_006_)
  );
  NAND _187_ (
    .A(_037_),
    .B(_040_),
    .Y(_071_)
  );
  NOR _188_ (
    .A(_034_),
    .B(_071_),
    .Y(_072_)
  );
  NOR _189_ (
    .A(_030_),
    .B(_056_),
    .Y(_073_)
  );
  NOR _190_ (
    .A(_016_),
    .B(_019_),
    .Y(_074_)
  );
  NOR _191_ (
    .A(_024_),
    .B(_044_),
    .Y(_075_)
  );
  NOR _192_ (
    .A(_046_),
    .B(_075_),
    .Y(_076_)
  );
  NOR _193_ (
    .A(_065_),
    .B(_076_),
    .Y(_077_)
  );
  NOR _194_ (
    .A(_072_),
    .B(_073_),
    .Y(_078_)
  );
  NAND _195_ (
    .A(_019_),
    .B(_078_),
    .Y(_079_)
  );
  NOR _196_ (
    .A(_077_),
    .B(_079_),
    .Y(_080_)
  );
  NOR _197_ (
    .A(_074_),
    .B(_080_),
    .Y(_007_)
  );
  NOR _198_ (
    .A(_017_),
    .B(_019_),
    .Y(_081_)
  );
  NOR _199_ (
    .A(_025_),
    .B(_046_),
    .Y(_082_)
  );
  NOR _200_ (
    .A(_048_),
    .B(_082_),
    .Y(_083_)
  );
  NOR _201_ (
    .A(_065_),
    .B(_083_),
    .Y(_084_)
  );
  NOR _202_ (
    .A(_017_),
    .B(_034_),
    .Y(_085_)
  );
  NOR _203_ (
    .A(_038_),
    .B(_085_),
    .Y(_086_)
  );
  NAND _204_ (
    .A(_035_),
    .B(_086_),
    .Y(_087_)
  );
  NOR _205_ (
    .A(_031_),
    .B(_056_),
    .Y(_088_)
  );
  NOR _206_ (
    .A(_028_),
    .B(_088_),
    .Y(_089_)
  );
  NAND _207_ (
    .A(_087_),
    .B(_089_),
    .Y(_090_)
  );
  NOR _208_ (
    .A(_084_),
    .B(_090_),
    .Y(_091_)
  );
  NOR _209_ (
    .A(_081_),
    .B(_091_),
    .Y(_008_)
  );
  (* src = "cont2.v:27" *)
  DFF _210_ (
    .C(clk),
    .D(_000_[0]),
    .Q(Q[0])
  );
  (* src = "cont2.v:27" *)
  DFF _211_ (
    .C(clk),
    .D(_000_[1]),
    .Q(Q[1])
  );
  (* src = "cont2.v:27" *)
  DFF _212_ (
    .C(clk),
    .D(_000_[2]),
    .Q(Q[2])
  );
  (* src = "cont2.v:27" *)
  DFF _213_ (
    .C(clk),
    .D(_000_[3]),
    .Q(Q[3])
  );
  (* src = "cont2.v:27" *)
  DFF _214_ (
    .C(clk),
    .D(_001_),
    .Q(RCO)
  );
  assign _092_[31:5] = 27'h0000000;
  assign _096_[1] = _095_[1];
  assign _102_[1] = _095_[1];
  assign _105_[0] = _092_[0];
  assign _106_[1] = modo[1];
  assign _107_[0] = _106_[0];
  assign { _129_[30:4], _129_[0] } = { _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _129_[31], _092_[0] };
  assign { _130_[31:3], _130_[0] } = { 28'h0000000, _092_[4], Q[0] };
  assign { _132_[30:3], _132_[0] } = { _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], _132_[31], Q[0] };
  assign _015_ = Q[1];
  assign _014_ = Q[0];
  assign _016_ = Q[2];
  assign _017_ = Q[3];
  assign _021_ = modo[1];
  assign _020_ = modo[0];
  assign _018_ = RCO;
  assign _019_ = enb;
  assign _001_ = _009_;
  assign _000_[0] = _005_;
  assign _000_[1] = _006_;
  assign _000_[2] = _007_;
  assign _000_[3] = _008_;
  assign _010_ = D[0];
  assign _011_ = D[1];
  assign _012_ = D[2];
  assign _013_ = D[3];
endmodule

(* top =  1  *)
(* src = "contador16bits.v:4" *)
module contador16bits(clk, enb, D, modo, Q, RCO);
  (* src = "contador16bits.v:12" *)
  wire _00_;
  (* src = "contador16bits.v:12" *)
  wire _01_;
  (* src = "contador16bits.v:12" *)
  wire _02_;
  (* src = "contador16bits.v:18" *)
  wire _03_;
  (* src = "contador16bits.v:19" *)
  wire _04_;
  (* src = "contador16bits.v:20" *)
  wire _05_;
  (* src = "contador16bits.v:7" *)
  wire _06_;
  (* src = "contador16bits.v:10" *)
  wire _07_;
  (* src = "contador16bits.v:10" *)
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [1:0] _15_;
  wire _16_;
  (* src = "contador16bits.v:9" *)
  input [15:0] D;
  (* src = "contador16bits.v:11" *)
  output [15:0] Q;
  (* src = "contador16bits.v:12" *)
  output [3:0] RCO;
  (* src = "contador16bits.v:18" *)
  wire a1;
  (* src = "contador16bits.v:19" *)
  wire a2;
  (* src = "contador16bits.v:20" *)
  wire a3;
  (* src = "contador16bits.v:7" *)
  input clk;
  (* src = "contador16bits.v:8" *)
  input enb;
  (* src = "contador16bits.v:10" *)
  input [1:0] modo;
  NAND _17_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NOT _18_ (
    .A(_09_),
    .Y(_10_)
  );
  NAND _19_ (
    .A(_06_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _20_ (
    .A(_00_),
    .B(_09_),
    .Y(_12_)
  );
  NAND _21_ (
    .A(_11_),
    .B(_12_),
    .Y(_03_)
  );
  NAND _22_ (
    .A(_01_),
    .B(_09_),
    .Y(_13_)
  );
  NAND _23_ (
    .A(_11_),
    .B(_13_),
    .Y(_04_)
  );
  NAND _24_ (
    .A(_02_),
    .B(_09_),
    .Y(_14_)
  );
  NAND _25_ (
    .A(_11_),
    .B(_14_),
    .Y(_05_)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "contador16bits.v:34" *)
  cont1 U0 (
    .D(D[3:0]),
    .Q(Q[3:0]),
    .RCO(RCO[0]),
    .clk(clk),
    .enb(enb),
    .modo(modo)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "contador16bits.v:45" *)
  cont2 U1 (
    .D(D[7:4]),
    .Q(Q[7:4]),
    .RCO(RCO[1]),
    .clk(a1),
    .enb(enb),
    .modo(modo)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "contador16bits.v:56" *)
  cont2 U2 (
    .D(D[11:8]),
    .Q(Q[11:8]),
    .RCO(RCO[2]),
    .clk(a2),
    .enb(enb),
    .modo(modo)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "contador16bits.v:67" *)
  cont2 U3 (
    .D(D[15:12]),
    .Q(Q[15:12]),
    .RCO(RCO[3]),
    .clk(a3),
    .enb(enb),
    .modo(modo)
  );
  assign _06_ = clk;
  assign _00_ = RCO[0];
  assign a1 = _03_;
  assign _01_ = RCO[1];
  assign a2 = _04_;
  assign _02_ = RCO[2];
  assign a3 = _05_;
  assign _07_ = modo[0];
  assign _08_ = modo[1];
endmodule
